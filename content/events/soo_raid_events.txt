#   This file is part of Sons of Odin.
#
#   Sons of Odin is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   Sons of Odin is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Sons of Odin.  If not, see <https://www.gnu.org/licenses/>.

namespace = soo_raiding

# SoO Raiding events:
#   0001-0002: Do I get an event?
#   0003-0009: Events for raid leader
#   0010-0019: Events for participants
#   0020-0059: Events for rape (participants POV)
#   0069-0099: Events for rape (victim POV)

# This hidden event decides whether or not the player gets an event at all.
soo_raiding.0001 = {
    hidden = yes 
    type = empty 
    scope = army 

    trigger = {
        has_game_rule = soo_explicit_content_enabled
        scope:raider = {
            is_at_location = scope:barony.title_province 
        }
        scope:barony.title_province = {
			fort_level > 0
		}
		NOT = {
			scope:county = { has_county_modifier = recently_sacked_modifier }	#The county must not have recently been sacked.
		}
    }

    immediate = {
        random = {
            chance = 50
            modifier = {
                add = 50 
                scope:raider = { has_trait = viking }
            }
            scope:raider = {
                scope:barony = { save_scope_as = sacked_barony }
                scope:county.holder = { save_scope_as = sacked_county_owner }
                trigger_event = soo_raiding.0002
            }
        }
    }
}

# This hidden event checks if all conditions for the event chain to fire are met
# This is done in a separate event to save computation time
soo_raiding.0002 = {
    hidden = yes
    type = character_event

    immediate = {
        # Find all people who can potentially rape someone
        root = {
            add_to_list = participants
            every_knight = {
                limit = { is_at_location = scope:sacked_barony.title_province }
                add_to_list = participants
            }
        }
        # Find all people who can potentially be raped. 
        scope:sacked_county_owner = {
            every_courtier_or_guest = {
                limit = {
                    OR = {
                        AND = {
                            is_female = yes
                            any_in_list = { 
                                list = participants
                                is_female = no 
                            }
                        }
                        AND = {
                            is_female = no
                            any_in_list = { 
                                list = participants
                                is_female = yes 
                            }
                        }
                    }
                    is_ai = yes # We spare human players, though they should be spared by being rulers anyway.
                    is_ruler = no # Rulers cannot be concubines. 
                    is_at_location = scope:sacked_barony.title_province
                    is_adult = yes # better make sure of this monkaS 
                    age < 40 # Young and fine men/women only 
                }
                add_to_list = victims 
            }
            # Decide who escapes. Characters with high Prowess or Intrigue have the best shot.
            every_in_list = {
                list = victims
                random = {
                    chance = 25 # Base escape chance
                    modifier = {
                        add = {
                            value = intrigue 
                            multiply = 1.5 
                        }
                    }
                    modifier = {
                        add = prowess 
                    }
                    # Spouses and children of the ruler should have fled the barony by now
                    modifier = {
                        add = 50
                        OR = {
                            is_spouse_of = scope:sacked_county_owner
                            is_child_of = scope:sacked_county_owner
                        }
                    }
                    # Athletic characters can make a leg for it
                    modifier = {
                        add = 15
                        has_trait = athletic
                    }
                    # Storng characters have a better shot
                    modifier = {
                        add = 5
                        has_trait = physique_good_1 
                    }
                    modifier = {
                        add = 10
                        has_trait = physique_good_2
                    }
                    modifier = {
                        add = 20
                        has_trait = physique_good_3 
                    }
                    modifier = {
                        add = -5
                        has_trait = physique_bad_1 
                    }
                    modifier = {
                        add = -10
                        has_trait = physique_bad_2
                    }
                    modifier = {
                        add = -20
                        has_trait = physique_bad_3 
                    }
                    # Unfortunately, attractive characters are more likely to get taken
                    modifier = {
                        add = -10
                        has_trait = beauty_good_1 
                    }
                    modifier = {
                        add = -20
                        has_trait = beauty_good_2
                    }
                    modifier = {
                        add = -40
                        has_trait = beauty_good_3 
                    }
                    modifier = {
                        add = 10
                        has_trait = beauty_bad_1 
                    }
                    modifier = {
                        add = 20
                        has_trait = beauty_bad_2
                    }
                    modifier = {
                        add = 40
                        has_trait = beauty_bad_3 
                    }
                    remove_from_list = victims 
                }
            }
        }
        # Fire the visible event 
        root = { save_scope_as = raid_leader }
        trigger_event = soo_raiding.0003
    }
}

# Present the raid leader with a choice on what to do here
soo_raiding.0003 = {
    type = character_event 
    title = soo_raiding.0003.t 
    desc = soo_raiding.0003.desc 
    theme = battle 
    override_background = {
        event_background = burning_building
    }

    trigger = {
        list_size = {
            name = victims 
            value >= 1
        }
    }

    left_portrait = {
        character = root 
        animation = anger
    }
    right_portrait = {
        character = scope:primary_victim
        animation = fear 
    }

    immediate = {
        random_in_list = {
            list = victims 
            save_scope_as = primary_victim
        }
        # Save several special lists for future events 
        every_in_list = {
            list = victims 
            add_to_list = remaining_victims
        }
        every_in_list = {
            list = victims
            limit = {
                is_spouse_of = scope:sacked_county_owner
            }
            add_to_list = county_owner_spouses
            remove_from_list = remaining_victims
        }
        every_in_list = {
            list = victims
            limit = {
                is_child_of = scope:sacked_county_owner
            }
            add_to_list = county_owner_children
            remove_from_list = remaining_victims
        }
        every_in_list = {
            list = victims
            limit = {
                OR = {
                    has_trait = beauty_good_1
                    has_trait = beauty_good_2
                    has_trait = beauty_good_3
                }
            }
            add_to_list = attractive_victims 
            remove_from_list = remaining_victims
        }
    }
    # Rape and pillage!
    option = {
        name = soo_raiding.0003.a 
        every_in_list = {
            list = victims
            add_opinion = {
                target = root
                modifier = soo_subjected_to_rape_opinion
                opinion = -25
            }
        }
        trigger_event = soo_raiding.0010
    }
    # I'll have no part in this, but my men can do as they wish.
    option = {
        name = soo_raiding.0003.b 
        every_in_list = {
            list = victims
            add_opinion = {
                target = root
                modifier = soo_subjected_to_rape_opinion
                opinion = -25
            }
        }
        remove_from_list = participants
        random_in_list = {
            list = participants
            trigger_event = soo_raiding.0010 
        }
    }
    # Punish your raiders for even considering this. 
    # This will prevent these events from happening for the current raid leader.
    # TODO: Implement this properly. For now, there's a game rule instead.
    #option = {
    #    name = soo_raiding.0003.c 
    #    every_in_list = {
    #        list = victims
    #        add_opinion = {
    #            target = root
    #            modifier = soo_spared_from_rape_opinion
    #            opinion = 25
    #        }
    #    }
    #}
    # Release them at once.
    option = {
        name = soo_raiding.0003.d 
        every_in_list = {
            list = victims
            add_opinion = {
                target = root
                modifier = soo_spared_from_rape_opinion
                opinion = 25
            }
        }
    }
}

# Victim choice event 
soo_raiding.0010 = {
    type = character_event 
    title = soo_raiding.0010.t 
    desc = soo_raiding.0010.desc 
    theme = battle 
    override_background = {
        event_background = burning_building
    }

    trigger = {
        list_size = {
            name = victims 
            value >= 1
        }
    }

    left_portrait = {
        character = root 
        animation = anger
    }
    right_portrait = {
        character = scope:primary_victim
        animation = fear
    }

    immediate = {
        remove_from_list = participants
        # Special clean up, make sure these are empty again!
        every_in_list = {
            list = chosen_victims
            remove_from_list = chosen_victims
        }
        every_in_list = {
            list = special_victims
            remove_from_list = special_victims
        }
    }

    # The owner of the barony themselves
    option = {
        name = soo_raiding.0010.a 
        trigger = {
            NOT = { has_sexuality = asexual }
            scope:sacked_county_owner = {
                is_in_list = victims
                root = { is_attracted_to_gender_of = prev }
            }
        }
        scope:sacked_county_owner = { 
            save_scope_as = chosen_victim 
            add_to_list = chosen_victims
        }
        soo_involuntary_handholding_effect = {
            VICTIM = scope:sacked_county_owner
        }
        trigger_event = soo_raiding.0020
    }
    # Any spouse of the sacked barony owner 
    option = {
        name = soo_raiding.0010.b
        trigger = {
            NOT = { has_sexuality = asexual }
            any_in_list = {
                list = county_owner_spouses
                root = { is_attracted_to_gender_of = prev }
            }
        }
        random_in_list = {
            list = county_owner_spouses
            limit = {
                root = { is_attracted_to_gender_of = prev }
            }
            save_scope_as = chosen_victim 
            add_to_list = chosen_victims
            root = {
                soo_involuntary_handholding_effect = {
                    VICTIM = prev
                }
            }
        }
        trigger_event = soo_raiding.0020
    }
    # All spouses of the sacked barony owner (oh my)
    option = {
        name = soo_raiding.0010.c 
        trigger = {
            NOT = { has_sexuality = asexual }
            has_trait = lustful 
            any_in_list = {
                list = county_owner_spouses
                root = { is_attracted_to_gender_of = prev }
                count > 1
            }
        }
        every_in_list = {
            list = county_owner_spouses
            limit = {
                root = { is_attracted_to_gender_of = prev }
            }
            save_scope_as = chosen_victim
            add_to_list = chosen_victims
            root = {
                soo_involuntary_handholding_effect = {
                    VICTIM = prev
                }
            }
        }
        trigger_event = soo_raiding.0020
    }
    # A child of the sacked barony owner
    option = {
        name = soo_raiding.0010.d 
        trigger = {
            NOT = { has_sexuality = asexual }
            any_in_list = {
                list = county_owner_children
                root = { is_attracted_to_gender_of = prev }
            }
        }
        random_in_list = {
            list = county_owner_children
            limit = {
                root = { is_attracted_to_gender_of = prev }
            }
            save_temporary_scope_as = chosen_child
            save_scope_as = chosen_victim
            add_to_list = chosen_victims
            root = {
                soo_involuntary_handholding_effect = {
                    VICTIM = prev
                }
            }
        }
        trigger_event = soo_raiding.0020
    }
    # All their children!
    option = {
        name = soo_raiding.0010.e 
        trigger = {
            NOT = { has_sexuality = asexual }
            has_trait = lustful 
            any_in_list = {
                list = county_owner_children
                root = { is_attracted_to_gender_of = prev }
                count > 1 
            }
        }
        every_in_list = {
            list = county_owner_children
            limit = {
                root = { is_attracted_to_gender_of = prev }
            }
            save_scope_as = chosen_victim
            add_to_list = chosen_victims
            root = {
                soo_involuntary_handholding_effect = {
                    VICTIM = prev
                }
            }
        }
        trigger_event = soo_raiding.0020
    }
    # The most beautiful of them all!
    option = {
        name = soo_raiding.0010.f
        trigger = {
            NOT = { has_sexuality = asexual }
            any_in_list = {
                list = attractive_victims
                root = { is_attracted_to_gender_of = prev }
            }
        }
        random_in_list = {
            list = attractive_victims
            limit = {
                root = { is_attracted_to_gender_of = prev }
            }
            save_scope_as = chosen_victim
            add_to_list = chosen_victims
            root = {
                soo_involuntary_handholding_effect = {
                    VICTIM = prev
                }
            }
        }
        trigger_event = soo_raiding.0020
    }
    # Any random, leftover courtier 
    option = {
        name = soo_raiding.0010.g
        trigger = {
            NOT = { has_sexuality = asexual }
            any_in_list = {
                list = remaining_victims
                root = { is_attracted_to_gender_of = prev }
            }
        }
        random_in_list = {
            list = remaining_victims
            limit = {
                root = { is_attracted_to_gender_of = prev }
            }
            save_scope_as = chosen_victim
            add_to_list = chosen_victims
            root = {
                soo_involuntary_handholding_effect = {
                    VICTIM = prev
                }
            }
        }
        trigger_event = soo_raiding.0020
    }
    # You will have no part in this.
    option = {
        name = soo_raiding.0010.i
        if = {
            limit = {
                NOT = { this = scope:raid_leader }
            }
            every_in_list = {
                list = victims
                add_opinion = {
                    target = root
                    modifier = soo_spared_from_rape_opinion
                    opinion = 25
                }
            }
        }
        random_in_list = {
            list = participants 
            trigger_event = soo_raiding.0010
        }
    }
}

# Decides whether or not to fire a follow-up event.
soo_raiding.0020 = {
    hidden = yes
    type = character_event 

    immediate = {
        if = {
            limit = {
                allowed_more_concubines = yes
                any_in_list = {
                    list = chosen_victims
                    OR = {
                        AND = {
                            is_female = yes 
                            has_trait = fecund 
                        }
                        AND = {
                            is_male = yes 
                            OR = {
                                has_trait = physique_good_1
                                has_trait = physique_good_2
                                has_trait = physique_good_3
                            }
                        }
                        OR = {
                            has_trait = beauty_good_1
                            has_trait = beauty_good_2
                            has_trait = beauty_good_3
                        }
                    }
                }
            }
            every_in_list = {
                list = chosen_victims
                limit = {
                    OR = {
                        AND = {
                            is_female = yes 
                            has_trait = fecund 
                        }
                        AND = {
                            is_male = yes 
                            OR = {
                                has_trait = physique_good_1
                                has_trait = physique_good_2
                                has_trait = physique_good_3
                            }
                        }
                        OR = {
                            has_trait = beauty_good_1
                            has_trait = beauty_good_2
                            has_trait = beauty_good_3
                        }
                    }
                }
                random = {
                    chance = 10
                    modifier = {
                        add = 10
                        is_female = yes 
                        age <= 29
                    }
                    modifier = {
                        add = 10 
                        is_female = yes 
                        age <= 21
                    }
                    modifier = {
                        add = -20
                        is_female = yes 
                        age >= 30 
                    }
                    modifier = {
                        add = 25
                        has_trait = beauty_good_1
                    }
                    modifier = {
                        add = 50
                        has_trait = beauty_good_2
                    }
                    modifier = {
                        add = 100
                        has_trait = beauty_good_3
                    }
                    modifier = {
                        add = 25
                        is_male = yes 
                        has_trait = physique_good_1 
                    }
                    modifier = {
                        add = 50
                        is_male = yes 
                        has_trait = physique_good_2
                    }
                    modifier = {
                        add = 100
                        is_male = yes 
                        has_trait = physique_good_3 
                    }
                    modifier = {
                        add = 50 
                        has_trait = fecund
                    }
                    add_to_list = special_victims 
                }
            }
            if = {
                limit = {
                    list_size = {
                        name = special_victims
                        value >= 1
                    }
                }
                trigger_event = soo_raiding.0021
            }
            else = {
                random_in_list = {
                    list = participants 
                    trigger_event = soo_raiding.0010
                }
            }
        }
        else = {
            # Just proceed the normal path
            random_in_list = {
                list = participants 
                trigger_event = soo_raiding.0010
            }
        }
    }
}

# The victim is very fine, make them a concubine?
soo_raiding.0021 = {
    type = character_event 
    title = soo_raiding.0021.t 
    desc = soo_raiding.0021.desc 
    theme = seduction

    left_portrait = {
        character = root 
        animation = anger
    }
    right_portrait = {
        character = scope:chosen_victim
        animation = fear 
    }

    trigger = {
        list_size = {
            name = special_victims
            value >= 1
        }
        # We must have the ability to take another concubine.
        is_landed = yes
		is_adult = yes
    }

    # Yes, take them home with me!
    option = {
        name = soo_raiding.0021.a
        trigger = {
            allowed_more_concubines = yes
        }
        random_in_list = {
            list = special_victims
            if = {
                limit = { is_imprisoned = yes}
                release_from_prison = yes
            }
            if = {
                limit = { is_married = yes }
                every_spouse = {
                    divorce = scope:recipient
                }
            }
            if = {
                limit = { exists = betrothed }
                break_betrothal = betrothed
            }
            root = {
                send_interface_message = {
                    type = event_generic_neutral
                    title = soo_victim_made_concubine_title
                    right_icon = prev
                    make_concubine = prev 
                }
            }
            # They're the concubine of root now, so they're no longer an eligible victim
            remove_from_list = victims 
            remove_from_list = remaining_victims
            remove_from_list = county_owner_spouses
            remove_from_list = county_owner_children
            remove_from_list = attractive_victims
        }
        random_in_list = {
            list = participants 
            trigger_event = soo_raiding.0010
        }
    }
    # No, I do not have a need for them.
    option = {
        name = soo_raiding.0021.b
        random_in_list = {
            list = participants 
            trigger_event = soo_raiding.0010
        }
    }
}